#ifndef __GRD_AVI_COMMON_H__
#define __GRD_AVI_COMMON_H__

#ifdef __cplusplus
extern "C" {
#endif

#include "avi_typedef.h"
#include "avi_api.h"

#define PRINT_ERR_INFO(fmt, args...) printf(fmt, ##args)
#define PRINT_INFO(fmt, args...) printf(fmt, ##args)
#define PRINT_ERR() printf("<<< File: %s, Line: %d, Function: %s >>>\n", __FILE__, __LINE__, __FUNCTION__)

#define PRINT_ERR_MSG(fmt, args...) \
            printf("[File: %s, Line: %d, Function: %s ]  " fmt "\n", __FILE__, __LINE__, __FUNCTION__, ##args)


/**********************************************************************
函数描述：向AVI文件中写入一个字符
入口参数：FILE *file: 文件指针
          char c: 写入的字符
返回值：  1: 写入正确
          非1: 失败
**********************************************************************/
extern int write_char(FILE *file, char c);

/**********************************************************************
函数描述：向AVI文件中写入一个整型
入口参数：FILE *file: 文件指针
          int i: 写入的整型
返回值：  1: 写入正确
          非1: 失败
**********************************************************************/
extern int write_int32(FILE *file, int i);

/**********************************************************************
函数描述：向AVI文件中写入一个整型
入口参数：FILE *file: 文件指针
          int fourcc: 写入的整型
返回值：  1: 写入正确
          非1: 失败
**********************************************************************/
extern int write_fourcc(FILE *file, int fourcc);

/**********************************************************************
函数描述：向AVI文件中写入一串数据
入口参数：FILE *file: 文件指针
          char *data: 写入的数据地址
          int size: 写入的数据大小
返回值：  1: 写入正确
          非1: 失败
**********************************************************************/
extern int write_data(FILE *file, char *data, int size);

/**********************************************************************
函数描述：从AVI文件中读取一个字符
入口参数：FILE *file: 文件指针
          char c: 读取的字符
返回值：  1: 读取正确
          非1: 失败
**********************************************************************/
extern int read_char(FILE *file, char *c);

/**********************************************************************
函数描述：从AVI文件中读取一个整型
入口参数：FILE *file: 文件指针
          int i: 读取的整型
返回值：  1: 读取正确
          非1: 失败
**********************************************************************/
extern int read_int32(FILE *file, int *i);

/**********************************************************************
函数描述：从AVI文件中读取一个整型
入口参数：FILE *file: 文件指针
          int fourcc: 读取的整型
返回值：  1: 读取正确
          非1: 失败
**********************************************************************/
extern int read_fourcc(FILE *file, int *fourcc);

/**********************************************************************
函数描述：从AVI文件中读取一串数据
入口参数：FILE *file: 文件指针
          char *data: 读取的数据地址
          int size: 读取的数据大小
返回值：  1: 读取正确
          非1: 失败
**********************************************************************/
extern int read_data(FILE *file, unsigned char *data, int size);

/**********************************************************************
函数描述：向内存地址中写入一个整型
入口参数：void *pp: 内存地址
          int w: 写入的整型
返回值：  1: 写入正确
          非1: 失败
**********************************************************************/
extern void avi_set_32(void *pp, int w);

/**********************************************************************
函数描述：从字符串中截取字符串
入口参数：char *dest: 目标字符串
          char *src: 源字符串
          int start: 截取的起始下标位置，0开始
          int end: 截取的结束下标位置，end - start就是截取的字符串长度
返回值：  无    
**********************************************************************/
extern void avi_substring(char *dest, char *src, int start, int end);

/**********************************************************************
函数描述：得到字符串中某字符的下标位置
入口参数：char *src: 源字符串
          char c: 查找的字符
返回值：  int: 找到则返回该字符的下标位置，如果没有该字符，则返回-1    
**********************************************************************/
extern int last_index_at(char *str, char c);

/**********************************************************************
函数描述：从avi文件名得到通道号
入口参数：char *file_name: avi文件名(不带路径名)
返回值：  unsigned long: 通道号       
**********************************************************************/
extern unsigned long avi_get_ch_num(char *file_name);

/**********************************************************************
函数描述：从avi文件名得到起始时间
入口参数：char *file_name: avi文件名(不带路径名)
返回值：  unsigned long long: 起始时间       
**********************************************************************/
extern unsigned long long avi_get_start_time(char *file_name);

/**********************************************************************
函数描述：从avi文件名得到结束时间
入口参数：char *file_name: avi文件名(不带路径名)
返回值：  unsigned long long: 结束时间       
**********************************************************************/
extern unsigned long long avi_get_stop_time(char *file_name);

/**********************************************************************
函数描述：得到当前日期的字符串格式
入口参数：char *str: 当前日期的字符串格式
返回值：  无        
**********************************************************************/
extern void get_date_str(char *str);

/**********************************************************************
函数描述：得到当前时间的字符串格式
入口参数：char *str: 当前时间的字符串格式
返回值：  无        
**********************************************************************/
extern void get_nowtime_str(char *str);


/**********************************************************************
函数描述：将时间戳 timetick 转换成 sdk_time_t 类型的数据结构
入口参数：GRD_TIME *ptime: sdk_time_t 类型的指针，记录时间
          int timetick: 时间戳，毫秒为单位
返回值：  无        
**********************************************************************/
extern void timetick_to_time(sdk_time_t *ptime, unsigned int timetick);


/**********************************************************************
函数描述：GRD_TIME 类型时间转换成 unsigned long long 类型时间
入口参数：GRD_TIME *p: sdk_time_t 类型时间         
返回值：  uint64_t: unsigned long long 类型时间
**********************************************************************/
extern uint64_t time_to_u64t(sdk_time_t *p); 

/**********************************************************************
函数描述：unsigned long long 类型时间转换成 sdk_time_t 类型时间
入口参数：GRD_TIME *ptime: 得到 sdk_time_t 类型时间
          uint64_t tmp64: unsigned long long 类型时间
返回值：  无
**********************************************************************/
extern void u64t_to_time(sdk_time_t *ptime, uint64_t tmp64); 


/**********************************************************************
函数描述：将每次录像动作记录到管理文件中
入口参数：u32t type: 安普定义如下
          GRD_NET_RECORD_TYPE_SCHED   定时录像
          GRD_NET_RECORD_TYPE_MOTION  移到侦测录像
          GRD_NET_RECORD_TYPE_ALARM   手动报警录像
          GRD_NET_RECORD_TYPE_MANU    手工录像
          uint32_t ch_num: 通道号
          uint64_t start: 起始时间
          uint64_t stop:  结束时间
返回值：  <0: 错误
           0: 正常
**********************************************************************/
extern int write_manage_info(uint32_t type, uint32_t ch_num, uint64_t start, uint64_t stop);




/**********************************************************************
查找SD卡中AVI类型文件函数步骤描述：
1，调用 search_file_by_time 得到查找文件控制句柄 FILE_LIST *
2，调用 get_file_node，得到FILE_LIST中的每一个FILE_NODE，即查找出来的
   单个文件
3，调用 search_close 结束
**********************************************************************/
/**********************************************************************
函数描述：根据时间段查找文件
入口参数：u32t type: 安普定义如下
          GRD_NET_RECORD_TYPE_SCHED   定时录像
          GRD_NET_RECORD_TYPE_MOTION  移到侦测录像
          GRD_NET_RECORD_TYPE_ALARM   手动报警录像
          GRD_NET_RECORD_TYPE_MANU    手工录像
          uint32_t ch_num: 通道号
          uint64_t start: 起始时间
          uint64_t stop:  结束时间
返回值：  FILE_LIST *: 返回的查找文件控制句柄       
**********************************************************************/
extern FILE_LIST *search_file_by_time(uint32_t type, uint32_t ch_num, uint64_t start, uint64_t stop);

/**********************************************************************
函数描述：根据时间段查找文件
入口参数：FILE_LIST *: 查找文件的控制句柄
          FILE_NODE *node: 得到文件信息指针
返回值：  安普定义如下:
          GRD_NET_FILE_SUCCESS: 获取文件信息成功
          GRD_NET_NOMOREFILE: 没有更多的文件，查找结束 
          GRD_NET_FILE_NOFIND: 未查找到文件
**********************************************************************/
extern int get_file_node(FILE_LIST *list, FILE_NODE *node);

/**********************************************************************
函数描述：查找文件结束
入口参数：FILE_LIST *: 查找文件的控制句柄
返回值：  无
**********************************************************************/
extern void search_close(FILE_LIST *list);

/**********************************************************************
函数描述：得到文件的大小
入口参数：FILE_NODE *node: 单个文件的信息节点
返回值：  uint32_t: 文件的大小,以字节为单位
**********************************************************************/
extern uint32_t get_file_size(FILE_NODE *node);


/**********************************************************************
函数描述：打印管理文件中的一次录像动作的信息 
入口参数：INDEX_NODE *n: 录像动作的信息指针
返回值：  无
**********************************************************************/
extern void print_index_node(INDEX_NODE *n);

/**********************************************************************
函数描述：打印查找文件句柄中的单个文件信息 
入口参数：FILE_NODE *n: 查找后得到的单个文件信息 
返回值：  无
**********************************************************************/
extern void print_node(FILE_NODE *n);

/**********************************************************************
函数描述：打印查找文件控制句柄中的所有文件信息 
入口参数：FILE_LIST *list: 查找文件控制句柄
返回值：  无
**********************************************************************/
extern void print_list(FILE_LIST *list);

/**********************************************************************
函数描述：打印安普接口的 GRD_NET_FINDDATA 信息 
入口参数：GRD_NET_FINDDATA *p: 查找后得到的单个文件信息 
返回值：  无
**********************************************************************/
// extern void print_finddata(GRD_NET_FINDDATA *p);

/**********************************************************************
函数描述：判断是否查找到文件
入口参数：FILE_LIST *list: 查找文件的控制句柄
返回值：  1: 空，没有找到文件
          0: 非空，查找到了文件
**********************************************************************/
extern int is_empty_list(FILE_LIST *list);

/**********************************************************************
函数描述：得到查找到的文件数目
入口参数：FILE_LIST *list: 查找文件的控制句柄
返回值：  int: 查找到的文件数目
**********************************************************************/
extern int get_len_list(FILE_LIST *list);

/**********************************************************************
函数描述：时间的tm格式转换成时间的GRD_TIME格式
入口参数：struct tm *src: 源操作数
          sdk_time_t *dst: 目标操作数
返回值：  无
**********************************************************************/
void tm_to_dmstime(sdk_time_t *dst, struct tm *src);

/**********************************************************************
函数描述：时间的tm格式加上秒数，得到时间的tm格式
入口参数：struct tm *dst: 目标操作数
          struct tm *src: 第一个操作数
          int seconds: 第二个操作数
返回值：  无
**********************************************************************/
void tm_add_seconds(struct tm *dst, struct tm *src, int time_seconds);

/**********************************************************************
函数描述：时间的u64t格式加上秒数，返回相加后的值
入口参数：u64t opr1: 第一个操作数
          int seconds: 第二个操作数
返回值：  uint64_t: 相加后的值
**********************************************************************/
uint64_t u64t_add_seconds(uint64_t opr1, int seconds);

#ifdef __cplusplus
}
#endif

#endif /* __GRD_AVI_COMMON_H__ */

